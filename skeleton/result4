==init_type() START==
maketypedecl()
maketypedecl()
maketypedecl()
maketypedecl()
maketypedecl()
push scope
insert ste to scope stack!
insert ste to scope stack!
insert ste to scope stack!
insert ste to scope stack!
==init_type() END==
push scope
ID	temp	1
ID	a	1
test4.c:1: error:ERROR : incomplete type error (this is not struct type)

=============PRINT SCOPE STACK=============
=====stack #0 from the top=====
=====Final Stack from the top=====
node name : string, decl class : 3
node name : void, decl class : 3
node name : char, decl class : 3
node name : int, decl class : 3
===========================================
ID	a	2
makevardecl()
declare()
insert ste to scope stack!
=============PRINT SCOPE STACK=============
=====stack #0 from the top=====
node name : a, decl class : 0
=====Final Stack from the top=====
node name : string, decl class : 3
node name : void, decl class : 3
node name : char, decl class : 3
node name : int, decl class : 3
===========================================
ID	a	3
makestructdecl()
*** THIS STRUCT's PARENT FUNCTION is GLOBAL
declare()
insert struct ste to scope stack bottom!
push scope
=============PRINT SCOPE STACK=============
=====stack #0 from the top=====
=====stack #1 from the top=====
node name : a, decl class : 0
=====Final Stack from the top=====
node name : string, decl class : 3
node name : void, decl class : 3
node name : char, decl class : 3
node name : int, decl class : 3
node name : a, decl class : 3
===========================================
ID	b	1
makestructdecl()
*** THIS STRUCT's PARENT FUNCTION is GLOBAL
declare()
insert struct ste to scope stack bottom!
push scope
=============PRINT SCOPE STACK=============
=====stack #0 from the top=====
=====stack #1 from the top=====
=====stack #2 from the top=====
node name : a, decl class : 0
=====Final Stack from the top=====
node name : string, decl class : 3
node name : void, decl class : 3
node name : char, decl class : 3
node name : int, decl class : 3
node name : a, decl class : 3
node name : b, decl class : 3
===========================================
ID	a	4
makevardecl()
declare()
insert ste to scope stack!
=============PRINT SCOPE STACK=============
=====stack #0 from the top=====
node name : a, decl class : 0
=====stack #1 from the top=====
=====stack #2 from the top=====
node name : a, decl class : 0
=====Final Stack from the top=====
node name : string, decl class : 3
node name : void, decl class : 3
node name : char, decl class : 3
node name : int, decl class : 3
node name : a, decl class : 3
node name : b, decl class : 3
===========================================
def list!
=============PRINT SCOPE STACK=============
=====stack #0 from the top=====
node name : a, decl class : 0
=====stack #1 from the top=====
=====stack #2 from the top=====
node name : a, decl class : 0
=====Final Stack from the top=====
node name : string, decl class : 3
node name : void, decl class : 3
node name : char, decl class : 3
node name : int, decl class : 3
node name : a, decl class : 3
node name : b, decl class : 3
===========================================
pop scope
pop ste
=============PRINT SCOPE STACK=============
=====stack #0 from the top=====
=====stack #1 from the top=====
node name : a, decl class : 0
=====Final Stack from the top=====
node name : string, decl class : 3
node name : void, decl class : 3
node name : char, decl class : 3
node name : int, decl class : 3
node name : a, decl class : 3
node name : b, decl class : 3
===========================================
=============PRINT SCOPE STACK=============
=====stack #0 from the top=====
=====stack #1 from the top=====
node name : a, decl class : 0
=====Final Stack from the top=====
node name : string, decl class : 3
node name : void, decl class : 3
node name : char, decl class : 3
node name : int, decl class : 3
node name : a, decl class : 3
node name : b, decl class : 3
===========================================
ID	b	2
makevardecl()
declare()
insert ste to scope stack!
=============PRINT SCOPE STACK=============
=====stack #0 from the top=====
node name : b, decl class : 0
=====stack #1 from the top=====
node name : a, decl class : 0
=====Final Stack from the top=====
node name : string, decl class : 3
node name : void, decl class : 3
node name : char, decl class : 3
node name : int, decl class : 3
node name : a, decl class : 3
node name : b, decl class : 3
===========================================
def list!
ID	a	5
makevardecl()
declare()
insert ste to scope stack!
=============PRINT SCOPE STACK=============
=====stack #0 from the top=====
node name : a, decl class : 0
node name : b, decl class : 0
=====stack #1 from the top=====
node name : a, decl class : 0
=====Final Stack from the top=====
node name : string, decl class : 3
node name : void, decl class : 3
node name : char, decl class : 3
node name : int, decl class : 3
node name : a, decl class : 3
node name : b, decl class : 3
===========================================
def list!
=============PRINT SCOPE STACK=============
=====stack #0 from the top=====
node name : a, decl class : 0
node name : b, decl class : 0
=====stack #1 from the top=====
node name : a, decl class : 0
=====Final Stack from the top=====
node name : string, decl class : 3
node name : void, decl class : 3
node name : char, decl class : 3
node name : int, decl class : 3
node name : a, decl class : 3
node name : b, decl class : 3
===========================================
pop scope
pop ste
pop ste
=============PRINT SCOPE STACK=============
=====stack #0 from the top=====
node name : a, decl class : 0
=====Final Stack from the top=====
node name : string, decl class : 3
node name : void, decl class : 3
node name : char, decl class : 3
node name : int, decl class : 3
node name : a, decl class : 3
node name : b, decl class : 3
===========================================
=============PRINT SCOPE STACK=============
=====stack #0 from the top=====
node name : a, decl class : 0
=====Final Stack from the top=====
node name : string, decl class : 3
node name : void, decl class : 3
node name : char, decl class : 3
node name : int, decl class : 3
node name : a, decl class : 3
node name : b, decl class : 3
===========================================
ID	main	1
makeprocdecl()
declare()
insert ste to scope stack!
push scope
declare()
insert ste to scope stack!
pop scope
pop ste
push scope
insert ste to scope stack!
=============PRINT SCOPE STACK=============
=====stack #0 from the top=====
node name : *return, decl class : 3
=====stack #1 from the top=====
node name : main, decl class : 2
node name : a, decl class : 0
=====Final Stack from the top=====
node name : string, decl class : 3
node name : void, decl class : 3
node name : char, decl class : 3
node name : int, decl class : 3
node name : a, decl class : 3
node name : b, decl class : 3
===========================================
=============PRINT SCOPE STACK=============
=====stack #0 from the top=====
node name : *return, decl class : 3
=====stack #1 from the top=====
node name : main, decl class : 2
node name : a, decl class : 0
=====Final Stack from the top=====
node name : string, decl class : 3
node name : void, decl class : 3
node name : char, decl class : 3
node name : int, decl class : 3
node name : a, decl class : 3
node name : b, decl class : 3
===========================================
ID	a	6
ID	temp	2
makevardecl()
declare()
insert ste to scope stack!
=============PRINT SCOPE STACK=============
=====stack #0 from the top=====
node name : temp, decl class : 0
node name : *return, decl class : 3
=====stack #1 from the top=====
node name : main, decl class : 2
node name : a, decl class : 0
=====Final Stack from the top=====
node name : string, decl class : 3
node name : void, decl class : 3
node name : char, decl class : 3
node name : int, decl class : 3
node name : a, decl class : 3
node name : b, decl class : 3
===========================================
def list!
ID	b	3
ID	temp2	1
makevardecl()
declare()
insert ste to scope stack!
=============PRINT SCOPE STACK=============
=====stack #0 from the top=====
node name : temp2, decl class : 0
node name : temp, decl class : 0
node name : *return, decl class : 3
=====stack #1 from the top=====
node name : main, decl class : 2
node name : a, decl class : 0
=====Final Stack from the top=====
node name : string, decl class : 3
node name : void, decl class : 3
node name : char, decl class : 3
node name : int, decl class : 3
node name : a, decl class : 3
node name : b, decl class : 3
===========================================
def list!
ID	a	7
makevardecl()
declare()
insert ste to scope stack!
=============PRINT SCOPE STACK=============
=====stack #0 from the top=====
node name : a, decl class : 0
node name : temp2, decl class : 0
node name : temp, decl class : 0
node name : *return, decl class : 3
=====stack #1 from the top=====
node name : main, decl class : 2
node name : a, decl class : 0
=====Final Stack from the top=====
node name : string, decl class : 3
node name : void, decl class : 3
node name : char, decl class : 3
node name : int, decl class : 3
node name : a, decl class : 3
node name : b, decl class : 3
===========================================
def list!
ID	a	8
ID	temp	3
ID	a	9
ID	a	10
ID	temp	4
ID	a	11
ID	b	4
ERROR : incomplete type error (This is not struct type!)
test4.c:15: error:ERROR : unary is NULL or unary semantic value->type is null!

test4.c:15: error:ERROR : assignment value is not same, or LHS value type is not variable!

ID	a	12
ID	temp	5
ID	c	1
ERROR : there is no such field name in this struct!
test4.c:16: error:ERROR : unary is NULL or unary semantic value->type is null!

test4.c:16: error:ERROR : assignment value is not same, or LHS value type is not variable!

ID	a	13
ID	temp	6
ID	b	5
ID	a	14
ID	a	15
ID	temp	7
ID	b	6
test4.c:18: error:ERROR : assignment value is not same, or LHS value type is not variable!

ID	temp	8
ID	b	7
ID	temp2	2
=============PRINT SCOPE STACK=============
=====stack #0 from the top=====
node name : a, decl class : 0
node name : temp2, decl class : 0
node name : temp, decl class : 0
node name : *return, decl class : 3
=====stack #1 from the top=====
node name : main, decl class : 2
node name : a, decl class : 0
=====Final Stack from the top=====
node name : string, decl class : 3
node name : void, decl class : 3
node name : char, decl class : 3
node name : int, decl class : 3
node name : a, decl class : 3
node name : b, decl class : 3
===========================================
pop scope
pop ste
pop ste
pop ste
pop ste
=============PRINT SCOPE STACK=============
=====stack #0 from the top=====
node name : main, decl class : 2
node name : a, decl class : 0
=====Final Stack from the top=====
node name : string, decl class : 3
node name : void, decl class : 3
node name : char, decl class : 3
node name : int, decl class : 3
node name : a, decl class : 3
node name : b, decl class : 3
===========================================
