==init_type() START==
maketypedecl()
maketypedecl()
maketypedecl()
maketypedecl()
maketypedecl()
push scope
insert ste to scope stack!
insert ste to scope stack!
insert ste to scope stack!
insert ste to scope stack!
==init_type() END==
ID	a	1
filename : test4.c
makevardecl()
declare()
insert ste to scope stack!
=============PRINT SCOPE STACK=============
=====Final Stack from the top=====
node name : a, decl class : 0
node name : string, decl class : 3
node name : void, decl class : 3
node name : char, decl class : 3
node name : int, decl class : 3
===========================================
ID	a	2
makestructdecl()
*** THIS STRUCT's PARENT FUNCTION is GLOBAL
declare()
insert struct ste to scope stack bottom!
push scope
=============PRINT SCOPE STACK=============
=====stack #0 from the top=====
=====Final Stack from the top=====
node name : a, decl class : 0
node name : string, decl class : 3
node name : void, decl class : 3
node name : char, decl class : 3
node name : int, decl class : 3
node name : a, decl class : 3
===========================================
ID	b	1
makestructdecl()
*** THIS STRUCT's PARENT FUNCTION is GLOBAL
declare()
insert struct ste to scope stack bottom!
push scope
=============PRINT SCOPE STACK=============
=====stack #0 from the top=====
=====stack #1 from the top=====
=====Final Stack from the top=====
node name : a, decl class : 0
node name : string, decl class : 3
node name : void, decl class : 3
node name : char, decl class : 3
node name : int, decl class : 3
node name : a, decl class : 3
node name : b, decl class : 3
===========================================
ID	a	3
makevardecl()
declare()
insert ste to scope stack!
=============PRINT SCOPE STACK=============
=====stack #0 from the top=====
node name : a, decl class : 0
=====stack #1 from the top=====
=====Final Stack from the top=====
node name : a, decl class : 0
node name : string, decl class : 3
node name : void, decl class : 3
node name : char, decl class : 3
node name : int, decl class : 3
node name : a, decl class : 3
node name : b, decl class : 3
===========================================
def list!
=============PRINT SCOPE STACK=============
=====stack #0 from the top=====
node name : a, decl class : 0
=====stack #1 from the top=====
=====Final Stack from the top=====
node name : a, decl class : 0
node name : string, decl class : 3
node name : void, decl class : 3
node name : char, decl class : 3
node name : int, decl class : 3
node name : a, decl class : 3
node name : b, decl class : 3
===========================================
pop scope
pop ste
=============PRINT SCOPE STACK=============
=====stack #0 from the top=====
=====Final Stack from the top=====
node name : a, decl class : 0
node name : string, decl class : 3
node name : void, decl class : 3
node name : char, decl class : 3
node name : int, decl class : 3
node name : a, decl class : 3
node name : b, decl class : 3
===========================================
=============PRINT SCOPE STACK=============
=====stack #0 from the top=====
=====Final Stack from the top=====
node name : a, decl class : 0
node name : string, decl class : 3
node name : void, decl class : 3
node name : char, decl class : 3
node name : int, decl class : 3
node name : a, decl class : 3
node name : b, decl class : 3
===========================================
def list!
ID	a	4
makevardecl()
declare()
insert ste to scope stack!
=============PRINT SCOPE STACK=============
=====stack #0 from the top=====
node name : a, decl class : 0
=====Final Stack from the top=====
node name : a, decl class : 0
node name : string, decl class : 3
node name : void, decl class : 3
node name : char, decl class : 3
node name : int, decl class : 3
node name : a, decl class : 3
node name : b, decl class : 3
===========================================
def list!
=============PRINT SCOPE STACK=============
=====stack #0 from the top=====
node name : a, decl class : 0
=====Final Stack from the top=====
node name : a, decl class : 0
node name : string, decl class : 3
node name : void, decl class : 3
node name : char, decl class : 3
node name : int, decl class : 3
node name : a, decl class : 3
node name : b, decl class : 3
===========================================
pop scope
pop ste
=============PRINT SCOPE STACK=============
=====Final Stack from the top=====
node name : a, decl class : 0
node name : string, decl class : 3
node name : void, decl class : 3
node name : char, decl class : 3
node name : int, decl class : 3
node name : a, decl class : 3
node name : b, decl class : 3
===========================================
=============PRINT SCOPE STACK=============
=====Final Stack from the top=====
node name : a, decl class : 0
node name : string, decl class : 3
node name : void, decl class : 3
node name : char, decl class : 3
node name : int, decl class : 3
node name : a, decl class : 3
node name : b, decl class : 3
===========================================
ID	main	1
makeprocdecl()
declare()
insert ste to scope stack!
push scope
declare()
insert ste to scope stack!
pop scope
pop ste
push scope
insert ste to scope stack!
=============PRINT SCOPE STACK=============
=====stack #0 from the top=====
node name : *return, decl class : 3
=====Final Stack from the top=====
node name : main, decl class : 2
node name : a, decl class : 0
node name : string, decl class : 3
node name : void, decl class : 3
node name : char, decl class : 3
node name : int, decl class : 3
node name : a, decl class : 3
node name : b, decl class : 3
===========================================
=============PRINT SCOPE STACK=============
=====stack #0 from the top=====
node name : *return, decl class : 3
=====Final Stack from the top=====
node name : main, decl class : 2
node name : a, decl class : 0
node name : string, decl class : 3
node name : void, decl class : 3
node name : char, decl class : 3
node name : int, decl class : 3
node name : a, decl class : 3
node name : b, decl class : 3
===========================================
ID	a	5
ID	temp	1
ERROR : incomplete type error (this is not struct type)
=============PRINT SCOPE STACK=============
=====stack #0 from the top=====
node name : *return, decl class : 3
=====Final Stack from the top=====
node name : main, decl class : 2
node name : a, decl class : 0
node name : string, decl class : 3
node name : void, decl class : 3
node name : char, decl class : 3
node name : int, decl class : 3
node name : a, decl class : 3
node name : b, decl class : 3
===========================================
def list!
ID	b	2
ID	temp2	1
makevardecl()
declare()
insert ste to scope stack!
=============PRINT SCOPE STACK=============
=====stack #0 from the top=====
node name : temp2, decl class : 0
node name : *return, decl class : 3
=====Final Stack from the top=====
node name : main, decl class : 2
node name : a, decl class : 0
node name : string, decl class : 3
node name : void, decl class : 3
node name : char, decl class : 3
node name : int, decl class : 3
node name : a, decl class : 3
node name : b, decl class : 3
===========================================
def list!
ID	a	6
makevardecl()
declare()
insert ste to scope stack!
=============PRINT SCOPE STACK=============
=====stack #0 from the top=====
node name : a, decl class : 0
node name : temp2, decl class : 0
node name : *return, decl class : 3
=====Final Stack from the top=====
node name : main, decl class : 2
node name : a, decl class : 0
node name : string, decl class : 3
node name : void, decl class : 3
node name : char, decl class : 3
node name : int, decl class : 3
node name : a, decl class : 3
node name : b, decl class : 3
===========================================
def list!
ID	a	7
ID	temp	2
ERROR : There is no such ID.
ID	a	8
ERROR : this is a POINTER to structure type or NULL
ERROR : unary is NULL or unary semantic value->type is null!
ERROR : assignment value is not same, or LHS value type is not variable!
ID	a	9
ID	temp	3
ERROR : There is no such ID.
ID	a	10
ERROR : this is a POINTER to structure type or NULL
ID	b	3
ERROR : this is a POINTER to structure type or NULL
ERROR : unary is NULL or unary semantic value->type is null!
ERROR : assignment value is not same, or LHS value type is not variable!
ID	a	11
ID	temp	4
ERROR : There is no such ID.
ID	c	1
ERROR : this is a POINTER to structure type or NULL
ERROR : unary is NULL or unary semantic value->type is null!
ERROR : assignment value is not same, or LHS value type is not variable!
ID	a	12
ID	temp	5
ERROR : There is no such ID.
ID	b	4
ERROR : this is a POINTER to structure type or NULL
ID	a	13
ERROR : this is a POINTER to structure type or NULL
ERROR : unary is NULL or unary semantic value->type is null!
ERROR : assignment value is not same, or LHS value type is not variable!
ID	a	14
ID	temp	6
ERROR : There is no such ID.
ID	b	5
ERROR : this is a POINTER to structure type or NULL
ERROR : unary is NULL or unary semantic value->type is null!
ERROR : assignment value is not same, or LHS value type is not variable!
ID	temp	7
ERROR : There is no such ID.
ID	b	6
ERROR : this is a POINTER to structure type or NULL
ID	temp2	2
ERROR : assignment value is not same, or LHS value type is not variable!
=============PRINT SCOPE STACK=============
=====stack #0 from the top=====
node name : a, decl class : 0
node name : temp2, decl class : 0
node name : *return, decl class : 3
=====Final Stack from the top=====
node name : main, decl class : 2
node name : a, decl class : 0
node name : string, decl class : 3
node name : void, decl class : 3
node name : char, decl class : 3
node name : int, decl class : 3
node name : a, decl class : 3
node name : b, decl class : 3
===========================================
pop scope
pop ste
pop ste
pop ste
=============PRINT SCOPE STACK=============
=====Final Stack from the top=====
node name : main, decl class : 2
node name : a, decl class : 0
node name : string, decl class : 3
node name : void, decl class : 3
node name : char, decl class : 3
node name : int, decl class : 3
node name : a, decl class : 3
node name : b, decl class : 3
===========================================
