==init_type() START==
maketypedecl()
maketypedecl()
maketypedecl()
maketypedecl()
push scope
declare()
insert ste to scope stack!
declare()
insert ste to scope stack!
declare()
insert ste to scope stack!
declare()
insert ste to scope stack!
==init_type() END==
--Print Type Decl--
* declclass = 3
* typeclass = 0
-------------------
ID	foo	1
makeprocdecl()
declare()
insert ste to scope stack!
push scope
declare()
insert ste to scope stack!
--Print Type Decl--
* declclass = 3
* typeclass = 0
-------------------
ID	a	1
makevardecl()
declare()
insert ste to scope stack!
=============PRINT SCOPE STACK=============
=====stack #0 from the top=====
node name : a, decl class : 0
node name : *return, decl class : 3
=====Final Stack from the top=====
node name : foo, decl class : 2
node name : string, decl class : 3
node name : void, decl class : 3
node name : char, decl class : 3
node name : int, decl class : 3
===========================================
--Print Type Decl--
* declclass = 3
* typeclass = 1
-------------------
ID	b	1
makevardecl()
declare()
insert ste to scope stack!
=============PRINT SCOPE STACK=============
=====stack #0 from the top=====
node name : b, decl class : 0
node name : a, decl class : 0
node name : *return, decl class : 3
=====Final Stack from the top=====
node name : foo, decl class : 2
node name : string, decl class : 3
node name : void, decl class : 3
node name : char, decl class : 3
node name : int, decl class : 3
===========================================
pop scope
pop ste
pop ste
pop ste
=============PRINT SCOPE STACK=============
=====Final Stack from the top=====
node name : foo, decl class : 2
node name : string, decl class : 3
node name : void, decl class : 3
node name : char, decl class : 3
node name : int, decl class : 3
===========================================
--Print Type Decl--
* declclass = 3
* typeclass = 0
-------------------
ID	main	1
makeprocdecl()
declare()
insert ste to scope stack!
push scope
declare()
insert ste to scope stack!
pop scope
pop ste
push scope
insert ste to scope stack!
=============PRINT SCOPE STACK=============
=====stack #0 from the top=====
node name : *return, decl class : 3
=====Final Stack from the top=====
node name : main, decl class : 2
node name : foo, decl class : 2
node name : string, decl class : 3
node name : void, decl class : 3
node name : char, decl class : 3
node name : int, decl class : 3
===========================================
=============PRINT SCOPE STACK=============
=====stack #0 from the top=====
node name : *return, decl class : 3
=====Final Stack from the top=====
node name : main, decl class : 2
node name : foo, decl class : 2
node name : string, decl class : 3
node name : void, decl class : 3
node name : char, decl class : 3
node name : int, decl class : 3
===========================================
--Print Type Decl--
* declclass = 3
* typeclass = 0
-------------------
ID	a	2
makevardecl()
declare()
insert ste to scope stack!
=============PRINT SCOPE STACK=============
=====stack #0 from the top=====
node name : a, decl class : 0
node name : *return, decl class : 3
=====Final Stack from the top=====
node name : main, decl class : 2
node name : foo, decl class : 2
node name : string, decl class : 3
node name : void, decl class : 3
node name : char, decl class : 3
node name : int, decl class : 3
===========================================
def list!
--Print Type Decl--
* declclass = 3
* typeclass = 1
-------------------
ID	b	2
makevardecl()
declare()
insert ste to scope stack!
=============PRINT SCOPE STACK=============
=====stack #0 from the top=====
node name : b, decl class : 0
node name : a, decl class : 0
node name : *return, decl class : 3
=====Final Stack from the top=====
node name : main, decl class : 2
node name : foo, decl class : 2
node name : string, decl class : 3
node name : void, decl class : 3
node name : char, decl class : 3
node name : int, decl class : 3
===========================================
def list!
ID	foo	2
ID	a	3
makeconstdecl()
ID	b	3
makeconstdecl()
--Print Type Decl--
* declclass = 3
* typeclass = 0
-------------------
--Print Type Decl--
* declclass = 3
* typeclass = 0
-------------------
aaa--Print Type Decl--
* declclass = 3
* typeclass = 1
-------------------
--Print Type Decl--
* declclass = 3
* typeclass = 1
-------------------
aaamakeconstdecl()
=============PRINT SCOPE STACK=============
=====stack #0 from the top=====
node name : b, decl class : 0
node name : a, decl class : 0
node name : *return, decl class : 3
=====Final Stack from the top=====
node name : main, decl class : 2
node name : foo, decl class : 2
node name : string, decl class : 3
node name : void, decl class : 3
node name : char, decl class : 3
node name : int, decl class : 3
===========================================
pop scope
pop ste
pop ste
pop ste
=============PRINT SCOPE STACK=============
=====Final Stack from the top=====
node name : main, decl class : 2
node name : foo, decl class : 2
node name : string, decl class : 3
node name : void, decl class : 3
node name : char, decl class : 3
node name : int, decl class : 3
===========================================
